## Copyright notice

*All material not in the public domain is subject to copyright
(University of Cambridge and/or its licensors) and is licensed for
personal / professional education use only.*


# Broken perceptron

Can you find the bug in the following code?




```{python}
## This file is broken and has one bug in it.

import numpy as np
import matplotlib.pyplot as plt
import io
## this is the contents of eg2d.csv -- embedding into the notebook
## is easier than copying the file across to colab.
content = '''\
x1,x2,t
0.2548729, 1.0172471, 1 
0.3493009, 1.0451711, 1 
0.4210662, 1.0123194, 1 
0.3228611, 0.9630418, 1 
0.3568552, 0.9334753, 1 
0.5608197, 0.9613992, 1 
0.6136994, 1.0057490, 1 
0.6967961, 1.0468137, 1 
0.7836699, 1.0993764, 1 
0.6401393, 1.1404411, 1 
0.04351973, 1.125658, 0 
0.21332454, 1.107589, 0 
0.32663819, 1.125658, 0 
0.41728911, 1.156867, 0 
0.53060275, 1.214357, 0 
0.40218062, 1.255422, 0 
0.62503079, 1.220928, 0 
0.74967581, 1.225856, 0 
0.69301898, 1.281703, 0 
0.47394593,1.229141, 0
'''

## read in data

##data = np.loadtxt("eg2d.dat", delimiter=",",skiprows=1)
data = np.loadtxt(io.StringIO(content), delimiter=",",skiprows=1)
```

Now let's try to learn the association between inputs and output.

```{python}
ninputs = data.shape[0]
wts = np.array([1, 1, 1.5])

def show_points(data, wts, plt, title):
    plt.clf()
    colors=np.array(["red", "blue"])
    plt.scatter(data[:,0], data[:,1], c=colors[data[:,2].astype(int)])
    plt.axis('equal')
    intercept = wts[2]/wts[1] # a
    slope = -wts[0]/wts[1]    # b
    plt.axline( (0, intercept), slope=slope)
    plt.xlim([0.0, 1.0])
    plt.ylim([0.8, 1.5])
    plt.title(title)
    plt.show()

plt.ion()    
show_points(data, wts, plt, 'start')

epsilon = 0.03
nepochs = 100


x = np.array([0.0, 0.0, -1])
for epoch in range(nepochs):
    error = 0.0
    order = np.random.choice(ninputs, ninputs,replace=False)

    for iteration in range(ninputs):
        i = order[iteration]
        x[0] = data[i,0]
        x[1] = data[i,1]
        t    = data[i,2]
        a = np.dot(x, wts)
        y = a > 0
        error = error + (0.5 *(t-y)**2)
        dw = epsilon * (y-t) * x
        wts = wts + dw
    title=f"Epoch {epoch} error {error}"
    print(title)
    if (epoch % 5) == 0:
        show_points(data, wts, plt, title)
        ##plt.pause(0.05)

    
## Questions, what happens if you use i=iteration?
## What if you use np.heaviside to calculate output y?  (much quicker)
```


